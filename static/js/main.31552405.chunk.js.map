{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","reverseButton","initialGoods","goods","preparedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,YAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,SAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAAiBJ,GAAaE,EAE9BG,EAhCR,SACEC,EACAN,EACAE,GAEA,IAAMK,EAAuB,YAAOD,GAiBpC,OAfIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAAOgB,KACV,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAAOkB,OACV,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKRZ,EACHK,EAAcQ,UACdR,EAQiBS,CACnBpB,EACAI,EACAE,GAQF,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAcL,EAAOgB,OAErCS,QAAS,kBAAMnB,EAAaN,EAAOgB,OAPrC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAcL,EAAOkB,SAErCO,QAAS,kBAAMnB,EAAaN,EAAOkB,SAPrC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAajB,IAEjBkB,QAAS,kBAAMjB,GAAeD,IAPhC,qBAYCE,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAhDgB,WACxBnB,EAAaN,EAAOI,SACpBI,GAAc,IA2CR,sBAUJ,6BACGE,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCpHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.31552405.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Name = 'name',\n  Length = 'length',\n  Default = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortBy,\n  isReversed: boolean,\n) {\n  const preparedGoods: string[] = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortBy.Name:\n          return good1.localeCompare(good2);\n\n        case SortBy.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReversed\n    ? preparedGoods.reverse()\n    : preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortBy.Default);\n  const [isReversed, setIsReversed] = useState(false);\n  const reverseButton = (sortField || isReversed);\n\n  const initialGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversed,\n  );\n\n  const handleButtonReset = () => {\n    setSortField(SortBy.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortBy.Name },\n          )}\n          onClick={() => setSortField(SortBy.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortBy.Length },\n          )}\n          onClick={() => setSortField(SortBy.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {reverseButton && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleButtonReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {initialGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}